{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.js","webpack:///./src/RendererContainerCanvas.js","webpack:///./src/RendererOffscreenCanvas.js","webpack:///./src/RendererOneCanvas.js","webpack:///./src/Utils.js","webpack:///./src/event/EventEmitter.js","webpack:///./src/loader/ResourceLoader.js","webpack:///./src/test/TestWindow.js","webpack:///./src/view/Container.js","webpack:///./src/view/DisplayObject.js","webpack:///./src/view/Sprite.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACW;AACvB;AACE;AACY;AACY;AAChC;;AAEpB;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB,uDAAS;AAClC;;AAEA,gCAAgC,gEAAuB;AACvD;;AAEA,2CAA2C,gEAAuB;AAClE;;AAEA,2CAA2C,mEAAuB;AAClE;;AAEA,qCAAqC,6DAAiB;AACtD;AACA;;AAEA;AACA,QAAQ,8DAAc;AACtB,QAAQ,8DAAc;AACtB,QAAQ,8DAAc;AACtB,QAAQ,8DAAc;AACtB,QAAQ,8DAAc;AACtB,QAAQ,8DAAc;AACtB;;AAEA;AACA,0BAA0B,wDAAU;AACpC;AACA;AACA;;AAEA,0BAA0B,wDAAU;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACS;AACS;AACzB;;AAEb;AACf;AACA;AACA;AACA,uDAAuD,YAAY;;AAEnE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,0DAAS;AAC1C;AACA;AACA;AACA;AACA,iCAAiC,oDAAM;AACvC;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,8DAAc;AACrC;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACS;AACS;AACzB;;AAEb;AACf;AACA;AACA;AACA,uDAAuD,YAAY;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,0DAAS;AAC1C;AACA;AACA;AACA,iCAAiC,oDAAM;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,8DAAc;AACrC;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACS;AACS;;AAEtC;AACf;AACA;AACA;AACA,uDAAuD,aAAa;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,0DAAS;AAC1C;AACA;AACA;AACA,iCAAiC,oDAAM;AACvC;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,8DAAc;AACrC;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACxGA;AAAA;AAAe;;AAEf;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACxEA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAiD;;AAElC,gGAAiC,2DAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,qBAAqB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AC5ED;AAAA;AAAA;AAAA;AAA0C;AACN;;AAErB,yBAAyB,uDAAS;AACjD;AACA;;AAEA;;AAEA,6BAA6B,oDAAM;;AAEnC,0BAA0B,uDAAS;AACnC;AACA;AACA;AACA;;AAEA,0BAA0B,oDAAM;AAChC;AACA,0BAA0B,oDAAM;AAChC;AACA;AACA,0BAA0B,oDAAM;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAA4C;;AAE7B,wBAAwB,sDAAa;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAiD;;AAElC,4BAA4B,2DAAY;AACvqBAAqB,sDAAa;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/App.js\");\n","import ResourceLoader from \"./loader/ResourceLoader\";\nimport RendererOffscreenCanvas from \"./RendererOffscreenCanvas\";\nimport Container from \"./view/Container\";\nimport TestWindow from \"./test/TestWindow\";\nimport RendererOneCanvas from \"./RendererOneCanvas.js\";\nimport RendererContainerCanvas from \"./RendererContainerCanvas.js\";\nimport Sprite from \"./view/Sprite\";\n\nexport default class App {\n    constructor() {\n        this.init();\n        this.loadResources();\n    }\n\n    init() {\n        this.canvas = document.getElementById(\"canvas\");\n\n        this.stage = new Container();\n        this.stage.name = 'stage';\n\n        this.rendererTest = new RendererOffscreenCanvas(this.canvas, this.stage);\n        this.rendererTest.start();\n\n        this.rendererOffscreenCanvas = new RendererOffscreenCanvas(this.canvas, this.stage);\n        //this.rendererOffscreenCanvas.start();\n\n        this.rendererContainerCanvas = new RendererContainerCanvas(this.canvas, this.stage);\n        //this.rendererContainerCanvas.start();\n\n        this.rendererOneCanvas = new RendererOneCanvas(this.canvas, this.stage);\n        //this.rendererOneCanvas.start();\n    }\n\n    loadResources() {\n        ResourceLoader.on('allComplete', this.allResourcesLoaded, this);\n        ResourceLoader.add('background', './assets/autoPlayPopup/background.png');\n        ResourceLoader.add('10ButtonNormal', './assets/autoPlayPopup/10Button/10ButtonNormal.png');\n        ResourceLoader.add('25ButtonNormal', './assets/autoPlayPopup/25Button/20ButtonNormal.png');\n        ResourceLoader.add('50ButtonNormal', './assets/autoPlayPopup/50Button/50ButtonNormal.png');\n        ResourceLoader.load();\n    }\n\n    allResourcesLoaded() {\n        let window1 = new TestWindow(1);\n        window1.x = 100;\n        //window1.scaleX = 0.5;\n        this.stage.addChild(window1);\n\n        let window2 = new TestWindow(2);\n        window2.x = 500;\n        window2.y = 500;\n        window2.scaleX = 0.5;\n        window2.scaleY = 0.5;\n        //this.stage.addChild(window2);\n\n        /*window.addEventListener('click', (event)=>{\n            window1.x = event.clientX;\n            window1.y = event.clientY;\n        });\n        window.addEventListener('mousemove', (event)=>{\n            window1.x = event.clientX;\n            window1.y = event.clientY;\n        });*/\n        window.addEventListener('keydown', (event)=>{\n            console.log(event.keyCode);\n            switch(event.keyCode) {\n                case 8:\n                    this.stage.removeChild(window2);\n                    break;\n                case 13:\n                    this.stage.addChild(window2);\n                    break;\n                case 187:\n                    this.stage.scaleX += 0.1;\n                    this.stage.scaleY += 0.1;\n                    break;\n                case 189:\n                    this.stage.scaleX -= 0.1;\n                    this.stage.scaleY -= 0.1;\n                    break;\n            }\n        });\n    }\n}\nif (!('createImageBitmap' in window)) {\n    window.createImageBitmap = async function (data) {\n        return new Promise((resolve,reject) => {\n            let dataURL;\n            if (data instanceof Blob) {\n                dataURL = URL.createObjectURL(data);\n            } else if (data instanceof ImageData) {\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d');\n                canvas.width = data.width;\n                canvas.height = data.height;\n                ctx.putImageData(data,0,0);\n                dataURL = canvas.toDataURL();\n            } else {\n                throw new Error('createImageBitmap does not handle the provided image source type');\n            }\n            const img = document.createElement('img');\n            img.addEventListener('load',function () {\n                resolve(this);\n            });\n            img.src = dataURL;\n        });\n    };\n}\nnew App();\n","import Sprite from \"./view/Sprite\";\nimport Container from \"./view/Container.js\";\nimport ResourceLoader from \"./loader/ResourceLoader\";\nimport Utils from \"./Utils\";\n\nexport default class RendererContainerCanvas {\n    constructor(canvas, rootItem) {\n        this._started = false;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext(\"2d\", {alpha: true});\n\n        this.canvasPool = [];\n        this._rootItem = rootItem;\n\n        this.update = this.update.bind(this);\n    }\n\n    start() {\n        this._started = true;\n        this.update();\n    }\n\n    stop() {\n        this._started = false;\n    }\n\n    update() {\n        if (!this._started) {\n            return;\n        }\n        this._context.resetTransform()\n        this._context.clearRect(0, 0, this._canvas.clientWidth, this._canvas.clientHeight);\n        this._context.save();\n        let canvas = this.draw(this._rootItem);\n        this._context.drawImage(canvas, 0, 0);\n        this._context.restore();\n        window.requestAnimationFrame(this.update);\n    }\n\n    poolIn(canvas) {\n        if(!canvas) {\n            canvas = this.createCanvas();\n        }\n        canvas.getContext('2d').resetTransform();\n        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.width);\n        this.canvasPool.push(canvas);\n    }\n\n    poolOut() {\n        if (this.canvasPool.length === 0) {\n            this.poolIn();\n        }\n        return this.canvasPool.shift();\n    }\n\n    createCanvas() {\n        let canvas = document.createElement('canvas');\n        canvas.width = 1000;\n        canvas.height = 1000;\n        return canvas;\n    }\n\n    draw(item) {\n        let canvas = this.poolOut();\n        let cCanvas = null;\n        item.children.forEach((child) => {\n            if (child instanceof Container) {\n                cCanvas = this.draw(child);\n                this.drawContainer(child, canvas, cCanvas);\n                this.poolIn(cCanvas);\n            }\n            if (child instanceof Sprite) {\n                this.drawSprite(child, canvas);\n            }\n        });\n        return canvas;\n    }\n\n    drawItem(item, resource, context) {\n        context.resetTransform();\n        context.translate(item.x + item.transformX, item.y + item.transformY);\n        context.rotate((Math.PI / 180) * item.rotation);\n        context.scale(item.scaleX, item.scaleY);\n\n        context.drawImage(resource, -item.transformX, -item.transformY);\n    }\n\n    drawContainer(item, canvas, cCanvas) {\n        this.drawItem(item, cCanvas, canvas.getContext('2d'));\n    }\n\n    drawSprite(item, canvas) {\n        let resource = ResourceLoader.resources[item.textureName];\n        this.drawItem(item, resource, canvas.getContext('2d'));\n    }\n\n    drawGraphics(item) {\n        item.steps.forEach((step) => {\n\n        });\n    }\n\n    get started() {\n        return this._started;\n    }\n}\n","import Sprite from \"./view/Sprite\";\nimport Container from \"./view/Container.js\";\nimport ResourceLoader from \"./loader/ResourceLoader\";\nimport Utils from \"./Utils\";\n\nexport default class RendererOffscreenCanvas {\n    constructor(canvas, rootItem) {\n        this._started = false;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext(\"2d\", {alpha: true});\n        this._offscreenCanvas = document.createElement('canvas');\n        this._offscreenCanvas.width = 1000;\n        this._offscreenCanvas.height = 1000;\n        this._offscreenCanvasContext = this._offscreenCanvas.getContext('2d');\n        this._currentContainerCanvas = document.createElement('canvas');\n        this._currentContainerCanvas.width = 1000;\n        this._currentContainerCanvas.height = 1000;\n        this._currentContainerCanvasContext = this._offscreenCanvas.getContext('2d');\n\n        this._rootItem = rootItem;\n        this.translateData = {\n            x: 0,\n            y: 0,\n            scaleX: 1,\n            scaleY: 1\n        }\n\n        this.update = this.update.bind(this);\n    }\n\n    start() {\n        this._started = true;\n        this.update();\n    }\n\n    stop() {\n        this._started = false;\n    }\n\n    update() {\n        if (!this._started) {\n            return;\n        }\n        this._context.clearRect(0, 0, this._canvas.clientWidth, this._canvas.clientHeight);\n        this._context.save();\n        this.draw(this._rootItem);\n        this._context.restore();\n        window.requestAnimationFrame(this.update);\n    }\n\n    draw(item) {\n        item.children.forEach((child) => {\n            if (child instanceof Container) {\n                this.draw(child);\n                this.drawContainer(child);\n            }\n            if (child instanceof Sprite) {\n                this.drawSprite(child);\n            }\n        });\n        this._context.drawImage(this._currentContainerCanvas, item.x, item.y);\n        this._currentContainerCanvasContext.resetTransform();\n        this._currentContainerCanvasContext.clearRect(0, 0, this._currentContainerCanvas.width, this._currentContainerCanvas.height);\n    }\n\n    drawItem(item, resource, context) {\n        //this._offscreenCanvas.width = 1000;\n        //this._offscreenCanvas.height = 1000;\n        context.resetTransform();\n        context.translate(item.x + item.transformX, item.y + item.transformY);\n        context.rotate((Math.PI / 180) * item.rotation);\n        context.scale(item.scaleX, item.scaleY);\n\n        context.drawImage(resource, -item.transformX, -item.transformY);\n    }\n\n    drawContainer(item) {\n        this.drawItem(item, this._offscreenCanvas, this._currentContainerCanvasContext);\n        this._currentContainerCanvasContext.resetTransform();\n        this._currentContainerCanvasContext.clearRect(0, 0, this._currentContainerCanvas.width, this._currentContainerCanvas.height);\n    }\n\n    drawSprite(item) {\n        let resource = ResourceLoader.resources[item.textureName];\n        this.drawItem(item, resource, this._offscreenCanvasContext);\n    }\n\n    drawGraphics(item) {\n        item.steps.forEach((step) => {\n\n        });\n    }\n\n    get started() {\n        return this._started;\n    }\n}\n","import Sprite from \"./view/Sprite\";\nimport Container from \"./view/Container.js\";\nimport ResourceLoader from \"./loader/ResourceLoader\";\n\nexport default class RendererOneCanvas {\n    constructor(canvas, rootItem) {\n        this._started = false;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext(\"2d\", {alpha: false});\n\n        this._rootItem = rootItem;\n        this.translate = {\n            x: 0,\n            y: 0,\n            scaleX: 1,\n            scaleY: 1\n        }\n\n        this.update = this.update.bind(this);\n    }\n\n    start() {\n        this._started = true;\n        this.update();\n    }\n\n    stop() {\n        this._started = false;\n    }\n\n    update() {\n        if (!this._started) {\n            return;\n        }\n        this._context.resetTransform();\n        this._context.clearRect(0, 0, this._canvas.clientWidth, this._canvas.clientHeight);\n        //this._context.save();\n        this.draw(this._rootItem);\n        //this._context.restore();\n        window.requestAnimationFrame(this.update);\n    }\n\n    draw(item) {\n        let offset = {\n            x: item.x - item.pivotX,\n            y: item.y - item.pivotY,\n            scaleX: item.scaleX,\n            scaleY: item.scaleY,\n        }\n        this.translate.x += offset.x;\n        this.translate.y += offset.y;\n        this.translate.scaleX *= offset.scaleX;\n        this.translate.scaleY *= offset.scaleY;\n\n        item.children.forEach((child) => {\n            if (child instanceof Container) {\n                this.draw(child);\n                this.drawContainer(child);\n            }\n            if (child instanceof Sprite) {\n                this.drawSprite(child);\n            }\n        });\n\n        this.translate.x -= offset.x;\n        this.translate.y -= offset.y;\n        this.translate.scaleX /= offset.scaleX;\n        this.translate.scaleY /= offset.scaleY;\n    }\n\n    drawItem(item, resource) {\n        this._context.resetTransform();\n        this._context.scale(\n            this.translate.scaleX,\n            this.translate.scaleY\n        );\n        this._context.translate(\n            this.translate.x + item.x + item.transformX,\n            this.translate.y + item.y + item.transformY\n        );\n        this._context.rotate((Math.PI / 180) * item.rotation);\n        this._context.scale(\n            this.translate.scaleX * item.scaleX,\n            this.translate.scaleY * item.scaleY\n        );\n        /*this._context.translate(item.x + item.transformX, item.y + item.transformY);\n        this._context.rotate((Math.PI / 180) * item.rotation);\n        this._context.scale(item.scaleX, item.scaleY);*/\n        this._context.drawImage(resource, -item.transformX, -item.transformY);\n    }\n\n    drawContainer(item) {\n        let resource = this._canvas;\n        //this.drawItem(item, resource);\n    }\n\n    drawSprite(item, canvas) {\n        let resource = ResourceLoader.resources[item.textureName];\n        this.drawItem(item, resource);\n    }\n\n    get started() {\n        return this._started;\n    }\n}\n","export default class Utils {\n\n    /**\n     * Перевод разиан в градусы\n     * @param rad\n     * @returns {number}\n     */\n    static radToDeg(rad) {\n        return (rad * 180) / Math.PI;\n    }\n\n    /**\n     * Перевод градусов в радианы\n     * @param deg\n     * @returns {number}\n     */\n    static degToRad(deg) {\n        return (Math.PI * deg) / 180;\n    }\n\n    /**\n     * Получение случайного целого числа в заданном диапазоне\n     * @param min\n     * @param max\n     * @returns {*}\n     */\n    static getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /**\n     * Получение случайного числа в заданном диапазоне\n     * @param min\n     * @param max\n     * @returns {*}\n     */\n    static getRandom(min, max) {\n        return Math.random() * (max - min + 1) + min;\n    }\n\n    /**\n     *\n     * @param angle угол поворота вокруг координат ценра вращения\n     * @param x координата x центра вращения\n     * @param y координата y центра вращения\n     * @param xRadius\n     * @param yRadius\n     */\n    static circleMotion(angle, x, y, xRadius, yRadius) {\n        let data = {};\n        let rAng = Utils.degToRad(angle % 360);\n        data.x = x + xRadius * Math.cos(rAng); // к центру вращениЯ по оси х прибавлЯем произведение косинуса угла поворота и радиуса по оси х и результат присваиваем _x позиции\n        data.y = y + yRadius * Math.sin(rAng); // почти также рассчитываем и позицию по оси y\n        return data;\n    }\n\n    static getUrlParam(parameter, defaultvalue) {\n        function getUrlVars() {\n            let vars = {};\n            let href = decodeURI(window.location.href);\n            let parts = href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {\n                vars[key] = decodeURIComponent(value); //JSON.parse(value);\n            });\n            return vars;\n        }\n\n        let urlparameter = defaultvalue;\n        if (window.location.href.indexOf(parameter) > -1) {\n            urlparameter = getUrlVars()[parameter];\n        }\n        return urlparameter;\n    }\n}","export default class EventEmitter {\n    constructor() {\n        this._callbacks = [];\n    }\n\n    emit(type, data) {\n        let callbacks = this._callbacks.filter((callback) => {\n            return callback.type === type;\n        });\n        callbacks.forEach((callback) => {\n            if (callback.callback) {\n               if (callback.context) {\n                   callback.callback.call(callback.context, data);\n               } else {\n                   callback.callback(callback.context, data);\n               }\n            }\n        })\n    }\n\n    on(type, callback, context) {\n        let event = {\n            type: type,\n            callback: callback,\n            context: context,\n            once: false\n        }\n        this._callbacks.push(event);\n    }\n\n    once(type, callback, context) {\n        let event = {\n            type: type,\n            callback: callback,\n            context: context,\n            once: true\n        }\n        this._callbacks.push(event);\n    }\n}\n","import EventEmitter from \"../event/EventEmitter\";\n\nexport default new class ResourceLoader extends EventEmitter {\n    constructor() {\n        super();\n        this._resources = {};\n        this._loaderStack = [];\n        this.init();\n    }\n\n    init() {\n        this.gameXHR = new XMLHttpRequest();\n        this.gameXHR.addEventListener('error', this.onError.bind(this));\n        this.gameXHR.addEventListener('load', this.onLoad.bind(this));\n    }\n\n    add(name, url) {\n\n        this._loaderStack.push({name: name, url: url});\n    }\n\n    load() {\n        let loadData = this._loaderStack.shift();\n        this._currentResource = loadData;\n        this.gameXHR.open('GET', loadData.url, true);\n        this.gameXHR.responseType = \"arraybuffer\";\n        this.gameXHR.send();\n    }\n\n    onError(event) {\n\n    }\n\n    async onLoad(event) {\n        this._resources[this._currentResource.name] = await this.makeImageBitmap(event.target.response);\n        if (this._loaderStack.length > 0) {\n            this.load();\n        } else {\n            console.log('All loaded');\n            //setTimeout(()=>{\n            this.emit('allComplete');\n            //}, 500);\n        }\n    }\n\n    async makeImageBitmap(data) {\n        let arrayBufferView = new Uint8Array(event.target.response);\n        let blob = new Blob([arrayBufferView.buffer]);\n        return createImageBitmap(blob);/*.then((imageBitmap)=>{\n            //console.log('!!!', imageBitmap);\n            //this._resources[this._currentResource.name] = imageBitmap;\n        });*/\n    }\n\n    makeImage(data) {\n        let arrayBufferView = new Uint8Array(data);\n        let blob = new Blob([arrayBufferView]);\n        let urlCreator = window.URL || window.webkitURL;\n        let imageUrl = urlCreator.createObjectURL(blob);\n\n        let image = new Image();\n        image.id = this._currentResource.name;\n        image.onload = (event) => {\n            console.log(this.image.id, this.image.width, this.image.height);\n        };\n        image.src = imageUrl;\n        return image;\n    }\n\n    get resources() {\n        return this._resources;\n    }\n\n    get loaderStack() {\n        return this._loaderStack;\n    }\n}\n","import Container from \"../view/Container\";\nimport Sprite from \"../view/Sprite\";\n\nexport default class TextWindow extends Container {\n    constructor(id) {\n        super();\n\n        this.name = 'Window' + id;\n\n        let background = new Sprite('background');\n\n        let buttons = new Container();\n        buttons.name = this.name + 'Buttons' + id;\n        buttons.x = 180;\n        buttons.y = 25;\n        buttons.scaleX = 0.5;\n\n        let Button1 = new Sprite('10ButtonNormal');\n        Button1.y = 0;\n        let Button2 = new Sprite('25ButtonNormal');\n        Button2.y = 150;\n        Button2.scaleX = 0.5;\n        let Button3 = new Sprite('50ButtonNormal');\n        Button3.y = 300;\n\n        buttons.addChild(Button1);\n        buttons.addChild(Button2);\n        buttons.addChild(Button3);\n\n        this.addChild(background);\n        this.addChild(buttons);\n    }\n}\n","import DisplayObject from \"./DisplayObject\";\n\nexport default class Container extends DisplayObject {\n    constructor() {\n        super();\n        this._children = [];\n    }\n\n    getChildIndex(item) {\n        return this._children.indexOf(item);\n    }\n\n    getChildByName(name) {\n        return this._children.find((child) => {\n            return child.name === name;\n        });\n    }\n\n    getChildAt(index) {\n        return this._children[index];\n    }\n\n    addChild(item) {\n        if (item.parent) {\n            item.parent.removeChild(item);\n        }\n        item.parent = this;\n        this._children.push(item);\n    }\n\n    addChildAt(item, index) {\n        item.parent = this;\n        this._children.splice(index, 0, item);\n    }\n\n    removeChild(item) {\n        let index = this.getChildIndex(item);\n        if (index !== -1) {\n            this._children.splice(index, 1);\n        }\n    }\n\n    get children() {\n        return this._children;\n    }\n}\n","import EventEmitter from \"../event/EventEmitter\";\n\nexport default class DisplayObject extends EventEmitter {\n    constructor() {\n        super();\n        this._x = 0;\n        this._y = 0;\n\n        this._width = 0;\n        this._height = 0;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n\n        this._pivotX = 0;\n        this._pivotY = 0;\n\n        this._transformX = 0;\n        this._transformY = 0;\n\n        this._rotation = 0;\n\n        this._name = '';\n\n        this._parent = null;\n\n        this._ineractive = false;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(value) {\n        this._x = value;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(value) {\n        this._y = value;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(value) {\n        this._width = value;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(value) {\n        this._height = value;\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(value) {\n        this._scaleX = value;\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(value) {\n        this._scaleY = value;\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(value) {\n        this._pivotX = value;\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(value) {\n        this._pivotY = value;\n    }\n\n    get transformX() {\n        return this._transformX;\n    }\n\n    set transformX(value) {\n        this._transformX = value;\n    }\n\n    get transformY() {\n        return this._transformY;\n    }\n\n    set transformY(value) {\n        this._transformY = value;\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(value) {\n        this._rotation = value;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(value) {\n        this._name = value;\n    }\n\n    get interactive() {\n        return this._interactive;\n    }\n\n    set interactive(value) {\n        this._interactive = value;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    set parent(value) {\n        this._parent = value;\n    }\n}\n","import DisplayObject from \"./DisplayObject\";\n\nexport default class Sprite extends DisplayObject {\n    constructor(textureName) {\n        super();\n\n        this._textureName = textureName;\n    }\n\n    get textureName() {\n        return this._textureName;\n    }\n\n    set textureName(value) {\n        this._textureName = value;\n    }\n}\n"],"sourceRoot":""}